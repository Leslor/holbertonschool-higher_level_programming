=================================
|  How to Use 4-print_square.py |
=================================

This module has one function called ``def print_square(size):``

Import the function:

        >>> print_square = __import__('4-print_square').print_square

Numbers
=======

``print_square(size)`` function that prints a square with the character #.

::
	>>> print_square(3)
	###
	###
	###

::

Boolean DataTypes (0  or 1)

	>>> print_square(True)
	#

::
	
Octal
	>>> print_square(0o10)
	########
	########
	########
	########
	########
	########
	########
	########

::

Hexadecimal	

	>>> print_square(0x10)
	################
	################
	################
	################
	################
	################
	################
	################
	################
	################
	################
	################
	################
	################
	################
	################

::

Binary	
	>>> print_square(0b10)
	##
	##


Invalid-Arguments
=================

Only whole numbers are allowed

Result if the arguments is a string

	>>> print_square('3')
	Traceback (most recent call last):
	TypeError: size must be an integer

::

Result if the arguments is a floating point.

	>>> print_square(3.2)
	Traceback (most recent call last):
	TypeError: size must be an integer
	>>> print_square(.4e7)
	Traceback (most recent call last):
	TypeError: size must be an integer

::

If we pass an infinity or Nan DataType

	>>> print_square(float('nan'))
	Traceback (most recent call last):
	TypeError: size must be an integer
	>>> print_square(float('inf'))
	Traceback (most recent call last):
	TypeError: size must be an integer

:: Other Cases

	>>> print_square((4\2))
	Traceback (most recent call last):
	SyntaxError: unexpected character after line continuation character
	>>> print_square(4, 2)
	Traceback (most recent call last):
	TypeError: print_square() takes 1 positional argument but 2 were given

	>>> print_square(2+3j)
	Traceback (most recent call last):
	TypeError: size must be an integer
