====================================
|  How to Use 2-matrix_divided.py  |
====================================

This module has one function called ``matrix_divided(matrix, div)``

Import the function:

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Numbers
=======

``matrix_divided(matrix, div)`` Returns a new matrix. All elements of the matrix should be divided by div, rounded to 2 decimal places. The ``/`` operator will be used.

::
	>>> matrix = [
	...     [1, -2, 4],
	...     [4, 3.5, -7],
	...     [21, 1, 3]
	... ]
	>>> matrix_divided(matrix, 2)
	[[0.5, -1.0, 2.0], [2.0, 1.75, -3.5], [10.5, 0.5, 1.5]]
	>>> matrix_divided(matrix, 3.2)
	[[0.31, -0.62, 1.25], [1.25, 1.09, -2.19], [6.56, 0.31, 0.94]]
	>>> matrix_divided(matrix, -2.5)
	[[-0.4, 0.8, -1.6], [-1.6, -1.4, 2.8], [-8.4, -0.4, -1.2]]

Note: All the elements of the array and the argument div can be float or integers, and positive or negative numbers.

``div`` argument cases:
=======================

If we pass 0 as a div argument:

        >>> matrix_divided(matrix, 0)
        Traceback (most recent call last):
        ZeroDivisionError: division by zero

::

If we do not place any element for the div argument.

	>>> matrix_divided(matrix,)
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> matrix_divided(matrix)
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

::

If we pass an string data type as a div argument.

	>>> matrix_divided(matrix,'nan')
	Traceback (most recent call last):
	TypeError: div must be an number

::

If we pass an infinity or Nan data type as a div argument.

	>>> matrix_divided(matrix,float('nan'))
	[[nan, nan, nan], [nan, nan, nan], [nan, nan, nan]]
	>>> matrix_divided(matrix,float('inf'))
	[[0.0, -0.0, 0.0], [0.0, 0.0, -0.0], [0.0, 0.0, 0.0]]

::



Invalid-Matrix
==============

Because ``\`` is also defined on data types other than numbers,
``matrix_divided()`` don't well if one of the arguments is not an integer or float.

Result if one of the arguments is a string

	>>> matrix = [[1, 'string', 0],
	...     ['string2', 1, 1]
	... ]


        >>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

If the matrix is not a list type.

	>>> matrix = 1
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):		
	TypeError: 'int' object is not subscriptable

	>>> matrix = "string"
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	
	>>> matrix = ("apple", "banana", "cherry")
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = {
	...     "brand": "Ford",
	...     "model": "Mustang",
	...     "year": 1964
	... }
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	KeyError: 0

If we pass an infinity or Nan number as each element of the matrix

        >>> matrix = [[float('nan'), float('nan')],
	...     [float('nan'), float('nan')]
	... ]
	>>> matrix
	[[nan, nan], [nan, nan]]
	>>> matrix_divided(matrix, 2)
	[[nan, nan], [nan, nan]]
	>>> matrix_divided(matrix, 9.9)
	[[nan, nan], [nan, nan]]
	>>> matrix_divided(matrix, float('inf'))
	[[nan, nan], [nan, nan]]
	>>> matrix_divided(matrix, float('nan'))
	[[nan, nan], [nan, nan]]


	>>> matrix = [[float('inf'), float('inf')],
	...     [float('inf'), float('inf')]
	... ]
	>>> matrix
	[[inf, inf], [inf, inf]]
	>>> matrix_divided(matrix, 2)
	[[inf, inf], [inf, inf]]
	>>> matrix_divided(matrix, 1)
	[[inf, inf], [inf, inf]]
	>>> matrix_divided(matrix, 4.5)
	[[inf, inf], [inf, inf]]
	>>> matrix_divided(matrix, float('inf'))
	[[nan, nan], [nan, nan]]
	>>> matrix_divided(matrix, float('nan'))
	[[nan, nan], [nan, nan]]
